# Node.js/Express Dockerfile for Agents
# Inherits from base service Dockerfile with agent-specific optimizations

# ================================
# Build Stage
# ================================
FROM node:18-alpine as builder

# Set environment variables for build
ENV NODE_ENV=development

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++

# Set working directory
WORKDIR /app

# Copy package files for dependency installation
COPY package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci --include=dev

# Copy source code
COPY . .

# Build the application
RUN npm run build

# ================================
# Production Stage
# ================================
FROM node:18-alpine as production

# Security: Create non-root user
RUN addgroup -g 1000 -S agent && \
    adduser -u 1000 -S agent -G agent

# Set environment variables for production
ENV NODE_ENV=production \
    PORT=3000 \
    AGENT_TYPE="" \
    LOG_LEVEL=info

# Install runtime dependencies only
RUN apk add --no-cache \
    curl \
    dumb-init

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install production dependencies only
RUN npm ci --only=production && \
    npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/src/main/shared ./src/main/shared

# Copy agent-specific source files
COPY src/main/agents/${AGENT_TYPE}/ ./src/main/agents/${AGENT_TYPE}/

# Change ownership to non-root user
RUN chown -R agent:agent /app

# Switch to non-root user
USER agent

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Run application
CMD ["node", "dist/src/main/agents/${AGENT_TYPE}/index.js"]
